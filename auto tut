
spawn(function()
    task.wait(5)

    local lp = game.Players.LocalPlayer
    local RepStorage = game:GetService("ReplicatedStorage")

    local function rename(remotename,hashedremote) hashedremote.Name = remotename end
    table.foreach(getupvalue(require(RepStorage:WaitForChild("Fsys")).load("RouterClient").init,7),rename)
    print("[Step 1] RouterClient remotes renamed")

    
    task.wait(5)


    local uiPaths = {
        "PlayerGui.NewsApp",
        "PlayerGui.NewsApp.EnclosingFrame.MainFrame",
        "PlayerGui.NewsApp.EnclosingFrame.MainFrame.Buttons.PlayButton",
        "PlayerGui.DialogApp.Dialog.SpawnChooserDialog",
        "PlayerGui.DialogApp.Dialog.SpawnChooserDialog.UpperCardContainer.ChoicesContent.Choices.Home.Button",
        "PlayerGui.DialogApp.Dialog"
    }

    local function removeUI(path)
        local parts = string.split(path, ".")
        local current = lp
        for _, part in ipairs(parts) do
            if current:FindFirstChild(part) then
                current = current[part]
            else
                return
            end
        end
        if current and current.Parent then
            current:Destroy()
            print("[UI Remove] Removed:", path)
        end
    end

    spawn(function()
        while true do
            for _, path in ipairs(uiPaths) do
                removeUI(path)
            end
            task.wait(1)
        end
    end)

   
    task.wait(1)
    local args = {
        [1] = "Parents",
        [2] = {["source_for_logging"] = "intro_sequence", ["dont_enter_location"] = true}
    }
    local chooseTeam = RepStorage:WaitForChild("API"):WaitForChild("TeamAPI/ChooseTeam")
    pcall(function() chooseTeam:InvokeServer(unpack(args)) end)
    print("[Step 3] ChooseTeam invoked")

  
    task.wait(1)
    local spawnFunc = RepStorage:WaitForChild("API"):WaitForChild("TeamAPI/Spawn")
    pcall(function() spawnFunc:InvokeServer() end)
    print("[Step 4] Spawn invoked")
end)


task.wait(15)

do
    local POTION_REQUIREMENTS = {
        Common = 2, Uncommon = 3, Rare = 4,
        ["Ultra Rare"] = 6, Legendary = 10
    }
    local WEBHOOK_URL = "https://discord.com/api/webhooks/YOUR_WEBHOOK_URL"

    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local HttpService = game:GetService("HttpService")
    local VirtualUser = game:GetService("VirtualUser")

    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    local ClientData = require(ReplicatedStorage.ClientModules.Core.ClientData)
    local EquipPetRemote = ReplicatedStorage.API["ToolAPI/Equip"]
    local FeedPotionRemote = ReplicatedStorage.API["PetObjectAPI/CreatePetObject"]

    local currentPets = {}
    local currentPotions = {}
    local currentlyEquippedPet = nil

    local function sendWebhook(message)
        pcall(function()
            local data = {content = message}
            request({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = HttpService:JSONEncode(data)
            })
        end)
    end

    local function updateInventory()
        local success, data = pcall(function() return ClientData.get_data() end)
        if success and data and data[player.Name] then
            currentPets = data[player.Name].inventory.pets or {}
            currentPotions = {}
            for _, item in pairs(data[player.Name].inventory.food or {}) do
                if item.kind == "pet_age_potion" then
                    table.insert(currentPotions, item)
                end
            end
            return true
        end
        return false
    end

    local function equipPet(pet)
        if currentlyEquippedPet == pet.unique then return true end
        local success = pcall(function()
            EquipPetRemote:InvokeServer(pet.unique, {use_sound_delay = true, equip_as_last = false})
        end)
        if success then
            currentlyEquippedPet = pet.unique
            task.wait(0.3)
            sendWebhook("üîÑ Equipped "..pet.id)
        else
            sendWebhook("‚ö†Ô∏è Failed to equip "..pet.id)
        end
        return success
    end

    local function feedPetFully(pet)
        if not equipPet(pet) then return 0 end
        local potionsUsed = 0
        local needed = 6 - pet.properties.age
        if #currentPotions < needed then
            sendWebhook("‚è∏Ô∏è Not enough potions to fully age "..pet.id)
            return 0
        end
        while pet.properties.age < 6 do
            local potion = currentPotions[1]
            local feedSuccess = pcall(function()
                FeedPotionRemote:InvokeServer(
                    "__Enum_PetObjectCreatorType_2",
                    {pet_unique = pet.unique, spawn_cframe = character.HumanoidRootPart.CFrame, additional_consume_uniques = {}, unique_id = potion.unique}
                )
            end)
            if feedSuccess then
                local startTime = os.clock()
                local initialCount = #currentPotions
                while #currentPotions >= initialCount and os.clock() - startTime < 10 do
                    updateInventory()
                    task.wait(0.1)
                end
                if #currentPotions < initialCount then
                    potionsUsed = potionsUsed + 1
                else
                    sendWebhook("‚ö†Ô∏è Potion not consumed in 10s, skipping...")
                    break
                end
            else
                sendWebhook("‚ö†Ô∏è Feed failed, retrying...")
                task.wait(0.5)
            end
        end
        sendWebhook("‚úÖ Fully aged "..pet.id.." using "..potionsUsed.." potions")
        return potionsUsed
    end

    local function processPets()
        if not updateInventory() then
            sendWebhook("‚ö†Ô∏è Inventory update failed")
            return false
        end
        for _, petId in ipairs(CONFIG.pet_id) do
            local rarity = CONFIG.pet_rarity[petId]
            if not rarity then continue end
            local petsToAge = {}
            for _, pet in pairs(currentPets) do
                if pet.id == petId and pet.properties.age < 6 then
                    table.insert(petsToAge, pet)
                end
            end
            table.sort(petsToAge, function(a,b) return a.properties.age < b.properties.age end)
            for _, pet in ipairs(petsToAge) do
                if #currentPotions < (6 - pet.properties.age) then
                    sendWebhook("‚è∏Ô∏è Not enough potions for "..pet.id)
                    break
                end
                feedPetFully(pet)
            end
        end
        return false
    end

    local lastAFK = os.clock()
    while true do
        if os.clock() - lastAFK > 50 then
            pcall(function()
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
                lastAFK = os.clock()
            end)
        end
        if processPets() then
            task.wait(1)
        else
            task.wait(3)
        end
    end
end
