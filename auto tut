
spawn(function()
    task.wait(5)

    local lp = game.Players.LocalPlayer
    local RepStorage = game:GetService("ReplicatedStorage")

    local function rename(remotename,hashedremote) hashedremote.Name = remotename end
    table.foreach(getupvalue(require(RepStorage:WaitForChild("Fsys")).load("RouterClient").init,7),rename)
    print("[Step 1] RouterClient remotes renamed")

    task.wait(5)

    local uiPaths = {
        "PlayerGui.NewsApp",
        "PlayerGui.NewsApp.EnclosingFrame.MainFrame",
        "PlayerGui.NewsApp.EnclosingFrame.MainFrame.Buttons.PlayButton",
        "PlayerGui.DialogApp.Dialog.SpawnChooserDialog",
        "PlayerGui.DialogApp.Dialog.SpawnChooserDialog.UpperCardContainer.ChoicesContent.Choices.Home.Button",
        "PlayerGui.DialogApp.Dialog"
    }

    local function removeUI(path)
        local parts = string.split(path, ".")
        local current = lp
        for _, part in ipairs(parts) do
            if current:FindFirstChild(part) then
                current = current[part]
            else
                return
            end
        end
        if current and current.Parent then
            current:Destroy()
        end
    end

    spawn(function()
        while true do
            for _, path in ipairs(uiPaths) do
                removeUI(path)
            end
            task.wait(1)
        end
    end)

    task.wait(1)
    local args = {
        [1] = "Parents",
        [2] = {["source_for_logging"] = "intro_sequence", ["dont_enter_location"] = true}
    }
    local chooseTeam = RepStorage:WaitForChild("API"):WaitForChild("TeamAPI/ChooseTeam")
    pcall(function() chooseTeam:InvokeServer(unpack(args)) end)

    task.wait(1)
    local spawnFunc = RepStorage:WaitForChild("API"):WaitForChild("TeamAPI/Spawn")
    pcall(function() spawnFunc:InvokeServer() end)
end)

task.wait(15)

do
    local WEBHOOK_URL = "https://discord.com/api/webhooks/1404060448692895824/tsUAjiD8JQlgL93NqgvQUhmU0k7u9pjaRJ9R2KtVulc8TlmLY-jze_jiv7U7u9qv64wj"

    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local HttpService = game:GetService("HttpService")
    local VirtualUser = game:GetService("VirtualUser")

    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    local ClientData = require(ReplicatedStorage.ClientModules.Core.ClientData)
    local EquipPetRemote = ReplicatedStorage.API["ToolAPI/Equip"]
    local FeedPotionRemote = ReplicatedStorage.API["PetObjectAPI/CreatePetObject"]

    local currentPets = {}
    local currentPotions = {}
    local currentlyEquippedPet = nil
    local lastInventorySummary = ""
    local lastWebhookMessage = ""

    local function sendWebhook(message)
        if message ~= lastWebhookMessage then
            lastWebhookMessage = message
            pcall(function()
                local data = {content = message}
                request({
                    Url = WEBHOOK_URL,
                    Method = "POST",
                    Headers = {["Content-Type"] = "application/json"},
                    Body = HttpService:JSONEncode(data)
                })
            end)
        end
    end

    local function sendInventorySummary()
        local counts = {}
        for _, pet in pairs(currentPets) do
            counts[pet.id] = (counts[pet.id] or 0) + 1
        end
        local summary = "üì¶ **Inventory Summary for " .. player.Name .. "**\n"
        for id, count in pairs(counts) do
            summary = summary .. id .. " = " .. count .. "\n"
        end
        if summary ~= lastInventorySummary then
            lastInventorySummary = summary
            sendWebhook(summary)
        end
    end

    local function updateInventory()
        local success, data = pcall(function() return ClientData.get_data() end)
        if success and data and data[player.Name] then
            currentPets = data[player.Name].inventory.pets or {}
            currentPotions = {}
            for _, item in pairs(data[player.Name].inventory.food or {}) do
                if item.kind == "pet_age_potion" then
                    table.insert(currentPotions, item)
                end
            end
            sendInventorySummary()
            return true
        end
        return false
    end

    local function equipPet(pet)
        if currentlyEquippedPet == pet.unique then return true end
        local success, err = pcall(function()
            EquipPetRemote:InvokeServer(pet.unique, {use_sound_delay = true, equip_as_last = false})
        end)
        if success then
            currentlyEquippedPet = pet.unique
        else
            sendWebhook("‚ö†Ô∏è Failed to equip " .. pet.id .. " | Error: " .. tostring(err))
        end
        return success
    end

    local function feedPetFully(pet)
        if not equipPet(pet) then return 0 end
        local potionsUsed = 0
        while pet.properties.age < 6 do
            if #currentPotions == 0 then
                sendWebhook("‚è∏Ô∏è Not enough potions to finish " .. pet.id)
                break
            end
            local potion = currentPotions[1]
            local success, err = pcall(function()
                FeedPotionRemote:InvokeServer(
                    "__Enum_PetObjectCreatorType_2",
                    {
                        pet_unique = pet.unique,
                        spawn_cframe = character.HumanoidRootPart.CFrame,
                        additional_consume_uniques = {},
                        unique_id = potion.unique
                    }
                )
            end)
            if success then
                potionsUsed = potionsUsed + 1
                updateInventory()
            else
                sendWebhook("‚ö†Ô∏è Feed failed for " .. pet.id .. " | Error: " .. tostring(err))
                break
            end
        end
        if potionsUsed > 0 then
            sendWebhook("‚úÖ Fully aged " .. pet.id .. " using " .. potionsUsed .. " potions")
        end
        return potionsUsed
    end

    local function processPets()
        if not updateInventory() then
            sendWebhook("‚ö†Ô∏è Inventory update failed")
            return
        end
        for _, petId in ipairs(CONFIG.pet_id) do
            local petsToAge = {}
            for _, pet in pairs(currentPets) do
                if pet.id == petId and pet.properties.age < 6 then
                    table.insert(petsToAge, pet)
                end
            end
            table.sort(petsToAge, function(a,b) return a.properties.age < b.properties.age end)
            for _, pet in ipairs(petsToAge) do
                feedPetFully(pet)
            end
        end
    end

    local lastAFK = os.clock()
    while true do
        if os.clock() - lastAFK > 50 then
            pcall(function()
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
                lastAFK = os.clock()
            end)
        end
        processPets()
        task.wait(3)
    end
end
