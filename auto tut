

-- Initialization System (unchanged from your original)
spawn(function()
    task.wait(5)
    local lp = game.Players.LocalPlayer
    local RepStorage = game:GetService("ReplicatedStorage")
    -- [Rest of your initialization code remains exactly the same]
end)

-- Main pet aging system
task.wait(15) -- Wait for initialization to complete

do
    local WEBHOOK_URL = "https://discord.com/api/webhooks/1404060448692895824/tsUAjiD8JQlgL93NqgvQUhmU0k7u9pjaRJ9R2KtVulc8TlmLY-jze_jiv7U7u9qv64wj"

    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local HttpService = game:GetService("HttpService")
    local VirtualUser = game:GetService("VirtualUser")

    local player = Players.LocalPlayer
    local ClientData = require(ReplicatedStorage.ClientModules.Core.ClientData)
    local EquipPetRemote = ReplicatedStorage.API["ToolAPI/Equip"]
    local FeedPotionRemote = ReplicatedStorage.API["PetObjectAPI/CreatePetObject"]

    local currentPets = {}
    local currentPotions = {}
    local currentlyEquippedPet = nil
    local petModelCache = {} -- Cache for pet models in workspace

    local function sendWebhook(message)
        pcall(function()
            local data = {content = message}
            request({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = HttpService:JSONEncode(data)
            })
        end)
    end

    local function updateInventory()
        local success, data = pcall(function() 
            return ClientData.get_data() 
        end)
        if success and data and data[player.Name] then
            currentPets = data[player.Name].inventory.pets or {}
            currentPotions = {}
            for _, item in pairs(data[player.Name].inventory.food or {}) do
                if item.kind == "pet_age_potion" then
                    table.insert(currentPotions, item)
                end
            end
            return true
        end
        return false
    end

    local function findPetModel(petUniqueId)
        -- Check cache first
        if petModelCache[petUniqueId] and petModelCache[petUniqueId].Parent then
            return petModelCache[petUniqueId]
        end
        
        -- Search in workspace
        for _, petModel in ipairs(workspace:GetDescendants()) do
            if petModel:FindFirstChild("PetUniqueId") and petModel.PetUniqueId.Value == petUniqueId then
                petModelCache[petUniqueId] = petModel
                return petModel
            end
        end
        return nil
    end

    local function equipPet(pet)
        if currentlyEquippedPet == pet.unique then 
            return true, findPetModel(pet.unique)
        end
        
        local success, err = pcall(function()
            EquipPetRemote:InvokeServer(pet.unique, {
                use_sound_delay = true,
                equip_as_last = false
            })
        end)
        
        if success then
            currentlyEquippedPet = pet.unique
            task.wait(1) -- Give time for pet to spawn
            
            -- Find the pet model in workspace
            local petModel = findPetModel(pet.unique)
            if petModel then
                petModelCache[pet.unique] = petModel
                return true, petModel
            else
                sendWebhook("⚠️ Could not find spawned pet model for "..pet.id)
                return false
            end
        else
            sendWebhook("⚠️ Failed to equip "..pet.id.." | Error: "..tostring(err))
            return false
        end
    end

    local function feedPet(pet, potionsNeeded)
        local success, petModel = equipPet(pet)
        if not success then return 0 end
        
        local potionsUsed = 0
        local initialPotionCount = #currentPotions
        
        for i = 1, potionsNeeded do
            if #currentPotions < 1 then break end
            
            -- Use the pet's actual CFrame if available
            local spawnCFrame = petModel and petModel:FindFirstChild("HumanoidRootPart") and 
                              petModel.HumanoidRootPart.CFrame or CFrame.new()
            
            local args = {
                [1] = "__Enum_PetObjectCreatorType_2",
                [2] = {
                    pet_unique = pet.unique,
                    spawn_cframe = spawnCFrame,
                    additional_consume_uniques = {},
                    unique_id = currentPotions[1].unique
                }
            }
            
            local feedSuccess, err = pcall(function()
                FeedPotionRemote:InvokeServer(unpack(args))
            end)
            
            if feedSuccess then
                potionsUsed = potionsUsed + 1
                -- Wait for consumption
                local startTime = os.clock()
                while os.clock() - startTime < 3 do
                    updateInventory()
                    if #currentPotions < initialPotionCount then
                        initialPotionCount = #currentPotions
                        break
                    end
                    task.wait(0.1)
                end
            else
                sendWebhook("⚠️ Feed failed for "..pet.id.." | Error: "..tostring(err))
                break
            end
        end
        
        if potionsUsed > 0 then
            sendWebhook("✅ Fed "..potionsUsed.." potions to "..pet.id)
        end
        return potionsUsed
    end

    local function processPets()
        if not updateInventory() then
            sendWebhook("⚠️ Inventory update failed")
            return false
        end
        
        for _, petId in ipairs(CONFIG.pet_id) do
            local petsToAge = {}
            for _, pet in pairs(currentPets) do
                if pet.id == petId and pet.properties.age < 6 then
                    table.insert(petsToAge, pet)
                end
            end
            
            table.sort(petsToAge, function(a,b) 
                return a.properties.age < b.properties.age -- Youngest first
            end)
            
            for _, pet in ipairs(petsToAge) do
                local needed = 6 - pet.properties.age
                if #currentPotions >= needed then
                    local used = feedPet(pet, needed)
                    if used == needed then
                        sendWebhook("✅ Aged "..petId.." to full!")
                        return true
                    end
                else
                    sendWebhook("⏸️ Not enough potions for "..petId)
                    break
                end
            end
        end
        return false
    end

    -- Main loop
    local lastAFK = os.clock()
    while true do
        if os.clock() - lastAFK > 50 then
            pcall(function()
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
                lastAFK = os.clock()
            end)
        end
        
        if processPets() then
            task.wait(1)
        else
            task.wait(3)
        end
    end
end
